{"version":3,"sources":["components/Products.js","components/Cart.js","data/mergedData.js","App.js","serviceWorker.js","index.js"],"names":["props","data","cartState","cart","setCart","Fragment","orientation","accordion","Object","values","map","group","index","Panel","header","groupName","key","bordered","dataSource","items","renderItem","item","Item","Text","name","balance","count","style","styles","Badge","includes","CheckOutlined","Icon","type","disabled","onClick","product","price","exchangeRate","toFixed","backgroundColor","fontSize","color","length","locale","emptyText","image","imageStyle","height","description","size","strong","ghost","danger","arr","slice","splice","indexOf","deleteFromCartHandler","Total","reduce","sum","marginTop","textAlign","mergedData","groupId","keys","names","B","id","N","G","Value","Goods","forEach","point","T","C","P","useState","Layout","Title","LikeOutlined","Products","Cart","minHeight","padding","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4mCAIe,WAACA,GACd,IAAMC,EAAOD,EAAMC,KADK,EAEED,EAAME,UAAxBC,EAFgB,EAEhBA,KAAMC,EAFU,EAEVA,QAMd,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CAASC,YAAY,QAArB,8CACA,kBAAC,IAAD,CAAUC,WAAS,GAChBC,OAAOC,OAAOR,GAAMS,KAAI,SAACC,EAAOC,GAAR,OACvB,kBAAC,IAASC,MAAV,CAAgBC,OAAQH,EAAMI,UAAWC,IAAKJ,GAC5C,kBAAC,IAAD,CACEK,UAAQ,EACRC,WAAYP,EAAMQ,MAClBC,WAAY,SAACC,GAAD,OACV,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAD,KACE,kBAAC,IAAWC,KAAZ,KAAkBF,EAAKG,MACtBH,EAAKI,SAAW,kBAAC,IAAD,CAAOC,MAAOL,EAAKI,QAASE,MAAOC,EAAOC,SAE7D,kBAAC,IAAD,KACI1B,EAAK2B,SAAST,GAKd,kBAAC,IAAD,KACE,kBAACU,EAAA,EAAD,CAAeJ,MAAOC,EAAOI,OAC7B,kBAAC,IAAWT,KAAZ,gEANF,kBAAC,IAAD,CAAQU,KAAK,UAAUC,UAAWb,EAAKI,QAASU,QAAS,kBArBnDC,EAqB0Ef,OApBlGjB,EAAQ,GAAD,mBAAKD,GAAL,CAAWiC,KADK,IAACA,IAsBHf,EAAKgB,MAAL,6DAA2BhB,EAAKgB,MAAQrC,EAAMsC,cAAcC,QAAQ,GAApE,qBAA8ElB,EAAKgB,MAAME,QAAQ,GAAjG,KAAyG,oFAmB5HX,EAAS,CACbC,MAAO,CACLW,gBAAiB,WAEnBR,KAAM,CACJS,SAAU,OACVC,MAAO,Y,QCrDI,WAAC1C,GAAW,IAAD,EACEA,EAAME,UAAxBC,EADgB,EAChBA,KAAMC,EADU,EACVA,QAUd,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,IAAD,CAASC,YAAY,QACnB,kBAAC,IAAD,kDAEGH,EAAKwC,OAAS,GAAK,kBAAC,IAAD,CAAOjB,MAAOvB,EAAKwC,OAAQhB,MAAOC,EAAOC,UAGjE,kBAAC,IAAD,CACEF,MAAO,CAAEa,gBAAiB,QAC1BvB,UAAQ,EACR2B,OAAQ,CACNC,UACE,kBAAC,IAAD,CACEC,MAAM,kEACNC,WAAY,CACVC,OAAQ,IAEVC,YAAY,gFAIlB/B,WAAYf,EACZiB,WAAY,SAACC,GAAD,OACV,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoB,MAAM,SACb,kBAAC,IAAWnB,KAAZ,KAAkBF,EAAKG,OAEzB,kBAAC,IAAD,CAAO0B,KAAK,SACV,kBAAC,IAAW3B,KAAZ,CAAiB4B,QAAM,GAAvB,IAA0B9B,EAAKgB,OAC/B,kBAAC,IAAD,CAAQe,OAAK,EAACC,QAAM,EAAClB,QAAS,kBAvCZ,SAACC,GAC7B,GAAIjC,EAAK2B,SAASM,GAAU,CAC1B,IAAMkB,EAAMnD,EAAKoD,QACjBD,EAAIE,OAAOrD,EAAKsD,QAAQrB,GAAU,GAClChC,EAAQkD,IAmCoCI,CAAsBrC,KAA1D,2GAOR,kBAAC,IAAWE,KAAZ,CAAiBI,MAAOC,EAAO+B,OAA/B,mCACUxD,EAAKyD,QAAO,SAACC,EAAKxC,GAAN,OAAewC,EAAMxC,EAAKgB,MAAQrC,EAAMsC,eAAc,GAAGC,QAAQ,GADvF,aAEGpC,EAAKyD,QAAO,SAACC,EAAKxC,GAAN,OAAewC,EAAMxC,EAAKgB,QAAO,GAAGE,QAAQ,GAF3D,OAQAX,EAAS,CACbC,MAAO,CACLW,gBAAiB,WAEnBmB,MAAO,CACLG,UAAW,OACXrB,SAAU,OACVsB,UAAW,U,iBC/DTC,EAAa,G,WAEVC,GACP,IAAI9C,EAAQX,OAAO0D,KAAKC,EAAMF,GAASG,GAAG1D,KAAI,SAAC2D,GAC7C,MAAO,CACLA,GAAYA,EACZ7C,KAAc2C,EAAMF,GAASG,EAAEC,GAAIC,EACnCjC,MAAO,KACPZ,QAAS,SAIbuC,EAAWC,GAAW,CACpBlD,UAAWoD,EAAMF,GAASM,EAC1BpD,UAZJ,IAAK,IAAI8C,KAAWE,EAAQ,EAAnBF,GAgBThE,EAAKuE,MAAMC,MAAMC,SAAQ,SAACC,GACxBX,EAAWW,EAAMJ,GAAGpD,MAAMuD,SAAQ,SAACrD,GAC7BsD,EAAMC,GAAKvD,EAAKgD,KAClBhD,EAAKgB,MAAQsC,EAAME,EACnBxD,EAAKI,QAAUkD,EAAMG,SAKZd,QCpBA,aAAO,IAAD,EACKe,mBAAS,IADd,mBACZ5E,EADY,KACNC,EADM,KAGnB,OACE,kBAAC,IAAD,CAAQuB,MAAOC,EAAOoD,QACpB,kBAAC,IAAD,CAAO9B,KAAK,UACV,kBAAC,IAAW+B,MAAZ,KACE,kBAACC,EAAA,EAAD,MADF,WAGA,kBAAC,IAAD,CAAKxC,MAAM,QAAX,gGAEF,kBAACyC,EAAD,CAAUlF,KAAMA,EAAMC,UAAW,CAAEC,OAAMC,WAAWkC,aAbrC,QAcf,kBAAC8C,EAAD,CAAMlF,UAAW,CAAEC,OAAMC,WAAWkC,aAdrB,UAmBfV,EAAS,CACboD,OAAQ,CACNK,UAAW,QACXC,QAAS,cClBOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.235eaf9d.chunk.js","sourcesContent":["import React from \"react\";\nimport { Divider, Collapse, List, Space, Typography, Badge, Button } from \"antd\";\nimport { CheckOutlined } from \"@ant-design/icons\";\n\nexport default (props) => {\n  const data = props.data;\n  const { cart, setCart } = props.cartState;\n\n  const addToCartHandler = (product) => {\n    setCart([...cart, product]);\n  };\n\n  return (\n    <React.Fragment>\n      <Divider orientation=\"left\">Каталог</Divider>\n      <Collapse accordion>\n        {Object.values(data).map((group, index) => (\n          <Collapse.Panel header={group.groupName} key={index}>\n            <List\n              bordered\n              dataSource={group.items}\n              renderItem={(item) => (\n                <List.Item>\n                  <Space>\n                    <Typography.Text>{item.name}</Typography.Text>\n                    {item.balance && <Badge count={item.balance} style={styles.Badge} />}\n                  </Space>\n                  <Space>\n                    {!cart.includes(item) ? (\n                      <Button type=\"primary\" disabled={!item.balance} onClick={() => addToCartHandler(item)}>\n                        {item.price ? `Купить за ${(item.price * props.exchangeRate).toFixed(2)} ₽ ($${item.price.toFixed(2)})` : \"Нет в наличии\"}\n                      </Button>\n                    ) : (\n                      <Space>\n                        <CheckOutlined style={styles.Icon} />\n                        <Typography.Text>Добавлено</Typography.Text>\n                      </Space>\n                    )}\n                  </Space>\n                </List.Item>\n              )}\n            />\n          </Collapse.Panel>\n        ))}\n      </Collapse>\n    </React.Fragment>\n  );\n};\n\nconst styles = {\n  Badge: {\n    backgroundColor: \"#52c41a\",\n  },\n  Icon: {\n    fontSize: \"20px\",\n    color: \"#52c41a\",\n  },\n};\n","import React from \"react\";\nimport { Divider, Badge, List, Empty, Space, Typography, Button } from \"antd\";\nexport default (props) => {\n  const { cart, setCart } = props.cartState;\n\n  const deleteFromCartHandler = (product) => {\n    if (cart.includes(product)) {\n      const arr = cart.slice();\n      arr.splice(cart.indexOf(product), 1);\n      setCart(arr);\n    }\n  };\n\n  return (\n    <React.Fragment>\n      <Divider orientation=\"left\">\n        <Space>\n          Корзина\n          {cart.length > 0 && <Badge count={cart.length} style={styles.Badge} />}\n        </Space>\n      </Divider>\n      <List\n        style={{ backgroundColor: \"#fff\" }}\n        bordered\n        locale={{\n          emptyText: (\n            <Empty\n              image=\"https://gw.alipayobjects.com/zos/antfincdn/ZHrcdLPrvN/empty.svg\"\n              imageStyle={{\n                height: 85,\n              }}\n              description=\"Корзина пуста.\"\n            />\n          ),\n        }}\n        dataSource={cart}\n        renderItem={(item) => (\n          <List.Item>\n            <Space>\n              <Badge color=\"blue\" />\n              <Typography.Text>{item.name}</Typography.Text>\n            </Space>\n            <Space size=\"large\">\n              <Typography.Text strong>${item.price}</Typography.Text>\n              <Button ghost danger onClick={() => deleteFromCartHandler(item)}>\n                Удалить из корзины\n              </Button>\n            </Space>\n          </List.Item>\n        )}\n      />\n      <Typography.Text style={styles.Total}>\n        Всего: {cart.reduce((sum, item) => sum + item.price * props.exchangeRate, 0).toFixed(2)} ₽ ($\n        {cart.reduce((sum, item) => sum + item.price, 0).toFixed(2)})\n      </Typography.Text>\n    </React.Fragment>\n  );\n};\n\nconst styles = {\n  Badge: {\n    backgroundColor: \"#52c41a\",\n  },\n  Total: {\n    marginTop: \"20px\",\n    fontSize: \"21px\",\n    textAlign: \"right\",\n  },\n};\n","import data from \"./json/data.json\";\nimport names from \"./json/names.json\";\n\nconst mergedData = {};\n\nfor (let groupId in names) {\n  let items = Object.keys(names[groupId].B).map((id) => {\n    return {\n      id: null || id,\n      name: null || names[groupId].B[id].N,\n      price: null,\n      balance: null,\n    };\n  });\n\n  mergedData[groupId] = {\n    groupName: names[groupId].G,\n    items,\n  };\n}\n\ndata.Value.Goods.forEach((point) => {\n  mergedData[point.G].items.forEach((item) => {\n    if (point.T == item.id) {\n      item.price = point.C;\n      item.balance = point.P;\n    }\n  });\n});\n\nexport default mergedData;\n","import React, { useState } from \"react\";\nimport { Layout, Space, Typography, Tag } from \"antd\";\nimport { LikeOutlined } from \"@ant-design/icons\";\nimport \"antd/dist/antd.css\";\nimport Products from \"./components/Products\";\nimport Cart from \"./components/Cart\";\nimport data from \"./data/mergedData\";\n\nconst exchangeRate = 76.82;\n\nexport default () => {\n  const [cart, setCart] = useState([]);\n\n  return (\n    <Layout style={styles.Layout}>\n      <Space size=\"middle\">\n        <Typography.Title>\n          <LikeOutlined /> 1XSLOT\n        </Typography.Title>\n        <Tag color=\"gold\">Тестовое задание</Tag>\n      </Space>\n      <Products data={data} cartState={{ cart, setCart }} exchangeRate={exchangeRate} />\n      <Cart cartState={{ cart, setCart }} exchangeRate={exchangeRate} />\n    </Layout>\n  );\n};\n\nconst styles = {\n  Layout: {\n    minHeight: \"100vh\",\n    padding: \"35px 30px\",\n  },\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}